app:
  title: Developer Portal (customized by Ankur Kumar)
  baseUrl: https://devportal-moza.onrender.com

organization:
  name: Dev Portal

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/tutorials/backend-to-backend-auth for
  # information on the format
  # auth:
  #   keys:
  #     - secret: ${BACKEND_SECRET}
  baseUrl: https://devportal-moza.onrender.com

  # optionally add extra headers
  # extraRequestHeaders:
  #   extra-header: my-value
  listen:
    port: 7007
    # Uncomment the following host directive to bind to all IPv4 interfaces and
    # not just the baseUrl hostname.
    host: 0.0.0.0
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false

    ## for JIRA
    img-src:
    # "'self'" and 'data' are from the backstage default but must be set since img-src is overriden
      - "'self'"
      - 'data:'
      # Allow your Jira instance for @roadiehq/backstage-plugin-jira
      - 'https://ankurkumarz.atlassian.net/'
  cors:
    origin: https://devportal-moza.onrender.com
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  # This is for local development only, it is not recommended to use this in production
  # The production database configuration is stored in app-config.production.yaml
  database:
    client: better-sqlite3
    connection: ':memory:'
    #client: pg
    #connection:
    #  host: 'localhost'
    #  port: 5432
    #  user: backstage
    #  password: secret
  cache:
    store: memory
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

#proxy:
#  '/jenkins/api':
#    target: 'http:localhost:8080'
#    changeOrigin: true
#    headers:
#      Authorization: Basic 
    
# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'local' # Alternatives - 'external'
  generator:
    runIn: 'local' # Alternatives - 'local'
  publisher:
    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

auth:
  # see https://backstage.io/docs/auth/ to learn about auth providers
  providers:
    github:
      development:
        clientId: ${GITHUB_CLIENT_ID}
        clientSecret: ${GITHUB_CLIENT_SECRET}
    auth0:
      development:
        clientId: ${AUTH_AUTH0_CLIENT_ID}
        clientSecret: ${AUTH_AUTH0_CLIENT_SECRET}
        domain: ${AUTH_AUTH0_DOMAIN_ID}

        ##these are optional settings

        #audience: ${AUTH_AUTH0_AUDIENCE}
        #connection: ${AUTH_AUTH0_CONNECTION}
        #connectionScope: ${AUTH_AUTH0_CONNECTION_SCOPE}

scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options

integrations:
  github:
    - host: github.com
      token: ${GITHUB_TOKEN}

  # optionally add extra headers
  # extraRequestHeaders:
  #   extra-header: my-value
sonarqube:
  instances:
    - name: default
      baseUrl: ${SONAR_BASE_URL}
      # this is the usertoken generated from Sonar - SONAR API uses BASIC AUTH without any password
      ## Just user token as USERID works
      apiKey: ${SONAR_API_KEY}
jenkins:
  instances:
    - name: devlocal
      baseUrl: ${JENKINS_BASE_URL}
      username: ${JENKINS_USERNAME}
      apiKey: ${JENKINS_API_KEY}
lighthouse:
  baseUrl: http://localhost:3003

costInsights:
  engineerCost: 200000
  products:
    computeEngine:
      name: Compute Engine
      icon: compute
    cloudStorage:
      name: Cloud Storage
      icon: storage
    bigQuery:
      name: BigQuery
      icon: search
  metrics:
    DAU:
      name: Daily Active Users
      default: true
    MSC:
      name: Monthly Subscribers

cloudCarbonFootprint:
  client:
    dateRangeType: months
    dateRangeValue: 1
    groupBy: week

proxy:
  '/newrelic/api':
    target: https://api.newrelic.com
    headers:
      X-Api-Key: ${NEW_RELIC_USER_KEY}
  '/newrelic/apm/api':
    target: https://api.newrelic.com/v2
    headers:
      X-Api-Key: ${NEW_RELIC_REST_API_KEY}
  '/jenkins/api':
    target: 'http://localhost:8080'
    changeOrigin: true
    headers:
      Authorization: Basic ${JENKINS_BASIC_AUTH_HEADER}
  '/jira/api':
    target: ${JIRA_URL}
    headers:
      Authorization: Basic ${JIRA_TOKEN}
      Accept: 'application/json'
      Content-Type: 'application/json'
      X-Atlassian-Token: 'nocheck'
      User-Agent: "MY-UA-STRING"

kubernetes:
  serviceLocatorMethod:
    type: 'multiTenant'
  clusterLocatorMethods:
    - type: 'localKubectlProxy'

catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Component, API, System, Domain, Resource, Location, User, Group]
  locations:
      # Backstage example components
    - type: file
      target: ../../scaffolder-templates/springboot-microservice-template/template.yaml
      rules:
        - allow: [Template]

    - type: url
      target: https://github.com/backstage/software-templates/blob/main/scaffolder-templates/springboot-grpc-template/template.yaml
      rules:
        - allow: [Template]

    - type: url
      target: https://github.com/backstage/software-templates/blob/main/scaffolder-templates/create-react-app/template.yaml
      rules:
        - allow: [Template]
    
    - type: url
      target: https://github.com/ankurkumarz/cloudcost-inspector/blob/main/api-info.yaml

    - type: url
      target: https://github.com/ankurkumarz/backstage-micro-app/blob/master/catalog-info.yaml

    - type: url
      target: https://github.com/ankurkumarz/cloudcost-inspector/blob/main/catalog-info.yaml

    - type: url
      target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all-components.yaml

    # Backstage example systems
    - type: url
      target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all-systems.yaml

    # Backstage example APIs
    - type: url
      target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all-apis.yaml

    # Backstage example organization groups
    - type: url
      target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/acme/org.yaml

    # Backstage example domains
    - type: url
      target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all-domains.yaml

    # Backstage example resources
    - type: url
      target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all-resources.yaml

    # The backstage demo deployment (this)
    - type: url
      target: https://github.com/backstage/demo/blob/master/catalog-info.yaml

    # The backstage library repository
    - type: url
      target: https://github.com/backstage/backstage/blob/master/catalog-info.yaml

    # Local example data, file locations are relative to the backend process, typically `packages/backend`
    - type: file
      target: ../../examples/entities.yaml

    # Local example organizational data
    - type: file
      target: ../../examples/org.yaml
      rules:
        - allow: [User, Group]

    ## Uncomment these lines to add more example data
    - type: url
      target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all.yaml
